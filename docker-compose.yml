services:
  db:
    image: postgres:15
    container_name: db_security_platform_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-youruser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-yourpassword}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-youruser} -d ${POSTGRES_DB:-appdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: db_security_platform_backend
    ports:
      - "8000:8000"
    volumes:
      - backend-vol:/app
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    restart: unless-stopped

  frontend_admin:
    build: ./frontend_admin
    container_name: db_security_platform_frontend_admin
    ports:
      - "${STREAMLIT_SERVER_PORT:-8501}:8501" # Используем переменную из .env или дефолт 8501
    volumes:
      - ./frontend_admin:/app # Для hot-reload Streamlit, если что-то меняем в коде
    env_file:
      - .env # Чтобы frontend мог получить BACKEND_API_URL
    environment:
      - PYTHONUNBUFFERED=1
      # BACKEND_API_URL должен быть установлен в .env, например:
      # BACKEND_API_URL=http://backend:8000 
      # (используем имя сервиса 'backend', так как они в одной Docker сети)
    depends_on:
      - backend # frontend зависит от backend
    restart: unless-stopped
  
  client_agent:
    build: ./client_agent_example
    container_name: db_security_platform_client_agent
    env_file:
      - ./client_agent_example/.env
    environment:
      - PYTHONUNBUFFERED=1
      # Все остальные переменные (CLIENT_AGENT_BACKEND_URL, CLIENT_AGENT_API_KEY и т.д.)
      # берутся ИСКЛЮЧИТЕЛЬНО из файла ./client_agent_example/.env
    depends_on:
      - backend
    restart: on-failure

volumes:
  postgres_data:
  backend-vol: